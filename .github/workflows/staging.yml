name: Build release Docker image

on:
  # Trigger the action manually from the UI
  workflow_dispatch:
  # Trigger the action when I create or push a `release/**` branch
  push:
    branches:
      - 'staging/**'

env:
  DOCKER_IMAGE_NAME: alexandermamaniy_nginx
  DOCKER_REGISTRY_URL: akey96

jobs:

  build_docker_images:
    # Job name that shows in the GitHub UI
    name: Build porfolio interface Docker Image and then publish it to docker hub registry

    # Runner to use
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Get the branch name
      id: strip-branch-name-staging
      run: staging_branch_name=$(echo "${{ github.ref }}" | sed 's|refs/heads/||') && echo "Building staging branch name $staging_branch_name" && echo "STAGING_BRANCH_NAME=$staging_branch_name" >> $GITHUB_ENV

    - name: Get the release version
      # i.e.: release/1.0.0 -> 1.0.0
      id: strip-branch-name
      run: release_version=$(echo "${{ github.ref }}" | sed 's/refs\/heads\/.*\///') && echo "Building release version $release_version" && echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    # Docker Login
    - name: Login to Docker hub
      run: docker login -u akey96 -p ${{ secrets.TOKEN_DOCKERHUB }}

    # Build the Docker image
    - name: Build the Docker image
      run: docker build --build-arg STAGING_BRANCH_NAME=$STAGING_BRANCH_NAME  --file Dockerfile-nginx.staging --tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION --no-cache .

    # Tag the Docker Images
    - name: Tag the image for the registry $DOCKER_REGISTRY_URL
      run: docker tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Create a latest image as well
      run: docker tag $DOCKER_IMAGE_NAME:$RELEASE_VERSION $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    # Push the images to the registry
    - name: Push the Docker image with version number
      run: docker push $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Push the latest tag
      run: docker push $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    # Remove the local images
    - name: Remove the Docker image with version number
      run: docker rmi $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:$RELEASE_VERSION

    - name: Remove the Docker image with latest tag
      run: docker rmi $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest

    - name: Remove the local image
      run: docker rmi $DOCKER_IMAGE_NAME:$RELEASE_VERSION

  deploy:
    name: Deploy Frontend container to AWS EC2
    needs: build_docker_images
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/github
          chmod 600 ~/.ssh/github
          cat >>~/.ssh/config <<END
          Host target
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github
            LogLevel ERROR
            StrictHostKeyChecking no
          END
      - name: Run deploy
        run: |
          ssh target "cd portfolio/ && docker compose -f docker-compose.staging.yml down nginx && docker pull $DOCKER_REGISTRY_URL/$DOCKER_IMAGE_NAME:latest && docker compose -f docker-compose.staging.yml up nginx -d --force-recreate"
